{"title":"Practice in R","markdown":{"yaml":{"title":"Practice in R","subtitle":"Việt Nam, 2024","categories":["SupplyChainManagement","Simulation","Agent Based Modeling"],"description":"Cách thực hành trong R","author":"Cao Xuân Lộc","date":"2024-11-13","title-block-banner":"img/mountain.jpg","title-block-banner-color":"white","format":{"html":{"code-fold":true,"code-tools":true}},"bibliography":"references.bib"},"headingText":"Thực hành trong R:","containsRefs":false,"markdown":"\n\n```{r}\n#| include: false\n#| message: false\n#| warning: false\npacman::p_load(\njanitor,\ntidyverse,\ndplyr,\ntidyr,\nmagrittr,\nshiny,\nleaflet,\nreactable,\nleaflet.extras,\nggplot2,\nquarto,\nreactablefmtr\n)\n```\n\n\n### Thư viện:\n\nTIếp theo là chúng ta sẽ lập thử *DES* trong **R** để giả lập quá trình duy chuyển của xe trong chuỗi cung ứng để ứng tính ETD và ETA.\n\nTrong **R** có package `simmer` thuần về xây dựng mô hình *DES*, đòi hỏi 3 nhân tố là: (i) Hành vi hoạt động của đối tượng, (ii) Hàm tính thời gian cho hoạt động và (iii) Môi trường để chạy mô phỏng. Bạn có thể đọc bài viết này để biết thêm [simmerR](https://www.supplychaindataanalytics.com/simmer-in-r-for-discrete-event-simulation/).\n\n### Mô hình DES:\n\nCác object cần có trong mô hình *DES* là:\n\n-   **Entitiy**: là đối tượng chính cần quan sát, ví dụ: khách hàng. Bạn sử dụng hàm `add_generator()` để thêm đối tượng vào mô hình.\n\n-   **Attribute**: là *property* của *entity* (có thể hiểu là đặc tính, trạng thái,...).\n\n-   **Resource**: là một nguồn lực mà *entity* được quyền dùng, ví dụ như nhân viên quán cafe cần hỗ trợ khách hàng khi có yêu cầu. Dùng hàm `add_resource()` để thêm và xác định số lượng resource bằng đối số: `capacity = n`.\n\n-   **Queue**: là một chuỗi để các *entity* tham gia vào, ví dụ như hàng xếp chờ lấy nước ở quán cafe.\n\n-   **Event**: các sự kiện thay đổi trong hệ thống.\n\nVí dụ như đoạn code dưới đây:\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: true\nlibrary(simmer)\nset.seed(1234)\n# Define the trajectory for the vehicle's process\nvehicle_traj <- trajectory(\"Vehicle Process\") %>%\n  # Step 1: Take Order\n  timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order\n  \n  # Step 2: Check if goods are available in the warehouse\n  seize(\"warehouse\", 1) %>%  \n  timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available\n  release(\"warehouse\", 1) %>%  # Release the warehouse resource after checking\n  \n  # Step 3: If goods are not available, wait for manufacturing (conditional)\n  branch(\n    option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance\n    continue = c(TRUE, TRUE),\n    trajectory() %>% \n      timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available\n    \n    trajectory(\"WaitForStock\")  # Second branch if goods are available\n  ) %>%\n  \n  # Step 4: Loading the goods\n  seize(\"truck\", 1) %>%  # Seize one truck for loading\n  timeout(function() rexp(1, 0.6)) %>%  # Loading time\n  release(\"truck\", 1) %>%  # Release truck after loading\n  \n  # Step 5: Transport to store\n  timeout(function() rexp(1, 1)) %>%  # Transport time\n  \n  # Step 6: Unload the goods at the store\n  seize(\"store\", 1) %>%  # Seize one store resource for unloading\n  timeout(function() rexp(1, 0.4)) %>%  # Unloading time\n  release(\"store\", 1)  # Release store resource\n\n# Create an environment\nenv <- simmer(\"Vehicle Simulation\") %>%\n  add_resource(\"warehouse\", capacity = 1) %>%  \n  add_resource(\"truck\", capacity = 1) %>%  \n  add_resource(\"store\", capacity = 1) %>%  \n  \n  # Add generator for vehicles arriving with an exponential inter-arrival time\n  add_generator(\"vehicle\", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units\n\n# Run the simulation for a longer duration\nenv %>% \n  run(until = 500)\n\nstart_time <- as.POSIXct(\"2024-11-09 08:30:00\", \n                         format=\"%Y-%m-%d %H:%M:%S\")\n\narrivals<-get_mon_arrivals(env, per_resource = T)\narrivals$datetime <- start_time + (arrivals$start_time * 60)  \narrivals$finish_datetime <- start_time + (arrivals$end_time * 60)  \n```\n\nThông tin từ **R** được xuất ra cho thấy thời gian chạy là 500 và có 45 xe đã di chuyển vào hệ thống. Kết quả giả lập được thể hiện như sau: các đốm thể hiện thời điểm xe đi vào, chờ giải quyết yêu cầu và đi ra khỏi hàng chờ.\n\n![Biểu đồ 1: Discrete Event Simulation](DES.gif)\n\nVà chúng ta sẽ có final output gồm:\n\n::: tabset\n#### Resources:\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Biểu đồ 2: Quy trình di chuyển giả lập của xe\"\n#| fig-cap-location: bottom\n\nlibrary(simmer.plot)\nresources <- get_mon_resources(env)\nplot(resources, \n     metric = \"usage\",\n     c(\"warehouse\", \"truck\",\"store\"),\n     items = \"server\")\n```\n\n#### Simulation:\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Biểu đồ 3: Thời gian giả lập của xe\"\n#| fig-cap-location: bottom\n\n\nlibrary(highcharter)\narrivals |> \n  dplyr::select(c(start_time,\n           end_time,\n           activity_time)) |> \n  pivot_longer(cols = everything(),\n               values_to = \"time\",\n               names_to = \"type\") |> \nhchart(\n  'line', \n  hcaes(y = time,\n        group = type)\n  ) \n```\n:::\n\n### Mô hình ABM:\n\nKhác với *DES*, *ABM* quan tâm nhiều hơn đến các đặc tính, thông tin của cá thể trong quần thể này. Do đó, chỉ với lượng thông tin về số xe, số nhà kho, số cửa hàng và quy trình hoạt động là chưa đủ để xây dựng mô hình *ABM*. Các dữ liệu khả thi có thể bao gồm: thông tin của đội xe: gồm bao nhiêu người hoặc gồm những ai; dữ liệu quá khứ về KPI, học vấn,...; thông tin về thời gian hoạt động của các cửa hàng; vị trí và thông tin về đường xá có cấm tải không;... *ABM* thường được ứng dụng vào việc xác định các *risks - rủi ro* trong quản lí chuỗi cung ứng\n\nTrong R có thư viện `NetLogoR` hỗ trợ chúng ta tốt về mảng mô hình *ABM*. Về nền tảng, *ABM* cần các yếu tố cơ bản sau:\n\n-   *Agents*: là cá thể hoạt động trong môi trường giả lập, có thể là con người, xe cộ, ...\n\n-   *World*: Môi trường mà các *agent* \"sống\" bên trong.\n\n-   *Set of rules*: Những luật lệ mà tất cả *agent* \"sống \"trong *world* phải tuân theo.\n\n-   *Loop*: Là sự lặp đi lặp lại của các hoạt động, sự tương tác. Trong lập trình thì nó giống như vòng lặp *for if* quen thuộc còn trong đời thực như cuộc sống hằng ngày của bạn sẽ được lặp đi lặp lại ví dụ: sáng thì đi học, tối thì đi ngủ và có thể có các đột biến như: sáng nay được nghỉ học, tối thứ 7 thì thức cả đêm (Đây lại là hoạt động quen thuộc của tôi!!!).\n\nNhư vậy, bạn có thể hình dung mơ hồ về quần thể giả lập bao gồm: các chiếc xe, các *nodes* trong *supply chain* như: nhà kho, cửa hàng,...\n\n![Biểu đồ 4: Simple of Agent Based Modeling](trajectory-animation.gif)\n\nNhư trên đây là ví dụ về cách *simulation* cho 1 đối tượng di chuyển trong mặt phẳng 10x10. Đối tượng sẽ di chuyển mỗi lần 1 ô với 4 hướng di chuyển: \"up\",\"down\",\"left\",\"right\" và được chọn hướng random. Kết quả sau 50 bước thì đối tượng đã di chuyển đến điểm *dropoff*.\n\nDưới đây là một ví dụ phức tạp hơn về giả lập thời gian di chuyển dự kiến của xe với các đặc điểm sau:\n\n-   **Nhận thông tin xe**: thời gian sẽ random từ 8h30 đến 9h.\n\n-   **Gọi xe**: Việc này sẽ hoàn thành trong 15 phút.\n\n-   **Xe di chuyển đến điểm pickup**: Tính thời gian di chuyển bằng `transportation time = distance/average speed` cộng với thời gian `loading time = 30'`.\n\n-   *Xe di chuyển đến điểm dropoff*: Tính thời gian di chuyển bằng `transportation time = distance/average speed` cộng với thời gian `unloading time = 40'`.\n\nKết quả giả lập cho 5 xe như sau:\n\n```{r}\n#| warning: false\n#| message: false\nlibrary(NetLogoR)\nlibrary(lubridate)\nlibrary(tidyverse)\n\n# Define new time parameters for the extended simulation\nn_vehicles <- 5              # Number of vehicles\ngrid_size <- 20              # Size of the grid\nspeed_limit <- 2             # Speed limit (cells per tick)\ntime_step <- 1               # Simulation time step (1 second per tick)\norder_creation_time <- c(hm(\"8:30\"), hm(\"9:00\"))   # Time when orders are released (8:30 AM)\nn_customer <- 5\n\nn_ticks <- 48  # Increase simulation time\n\n# Initialize the world, orders, and vehicle positions\nworld <- createWorld(minPxcor = -grid_size, \n                     maxPxcor = grid_size, \n                     minPycor = -grid_size, \n                     maxPycor = grid_size)\n\nrandom_coords <- randomXYcor(world, n = n_vehicles)\n\n# Define orders and vehicles\norders <- data.frame(\n  order_id = 1:n_customer,\n  pickup_x = sample(1:grid_size, n_customer, replace = TRUE),\n  pickup_y = sample(1:grid_size, n_customer, replace = TRUE),\n  dropoff_x = sample(1:grid_size, n_customer, replace = TRUE),\n  dropoff_y = sample(1:grid_size, n_customer, replace = TRUE),\n  order_time = as.POSIXct(\"08:30:00\", format = \"%H:%M:%S\") + runif(n_customer, 0, 1800)\n)\n\n# Initialize vehicles' position and speed\nvehicles_df <- data.frame(\n  vehicle_id = 1:n_vehicles,\n  xcor = random_coords[, 1],\n  ycor = random_coords[, 2],\n  speed = rep(1.5, n_vehicles)\n)\n\n# Initialize tracking variables\nvehicle_order <- rep(NA, n_vehicles)\norder_status <- rep(NA, n_customer)\nvehicle_state <- rep(\"waiting\", n_vehicles)  # New: track state of each vehicle\nETA <- rep(NA, n_vehicles)  # Initialize ETA for each vehicle\nETD <- rep(NA, n_vehicles)  # Initialize ETD for each vehicle\ncompleted_time <- rep(NA, n_vehicles)  # Initialize completed time for each vehicle\n\n# Function to simulate vehicle movement (with speed and direction)\nmove_vehicle <- function(vehicle, destination) {\n  angle_to_dest <- atan2(destination[2] - vehicle$ycor, destination[1] - vehicle$xcor)\n  distance_to_dest <- sqrt((vehicle$xcor - destination[1])^2 + (vehicle$ycor - destination[2])^2)\n  \n  # Move the vehicle\n  distance_to_move <- min(distance_to_dest, vehicle$speed)\n  vehicle$xcor <- vehicle$xcor + distance_to_move * cos(angle_to_dest)\n  vehicle$ycor <- vehicle$ycor + distance_to_move * sin(angle_to_dest)\n  \n  return(vehicle)\n}\n\n# Function to calculate the distance between two points\ncalculate_distance <- function(x1, y1, x2, y2) {\n  return(sqrt((x1 - x2)^2 + (y1 - y2)^2))\n}\n\n# Function to check if a vehicle is at a location (pickup/dropoff)\nat_location <- function(vehicle, location) {\n  return(abs(vehicle$xcor - location[1]) < 0.5 && abs(vehicle$ycor - location[2]) < 0.5)\n}\n\nsimulation_start_time <- as.POSIXct(\"08:00:00\", format = \"%H:%M:%S\")\n\n# Initialize an empty data frame to store the results\nfinal_results <- data.frame()\n\n# Simulation loop with updated conditions\nfor (tick in 1:n_ticks) {\n  current_time <- simulation_start_time + seconds(tick) * 3600 / 2\n  \n  # Process each vehicle\n  for (i in 1:n_vehicles) {\n    if (is.na(vehicle_order[i])) {  \n      # Assign a vehicle to an order if it's free and an order is available\n      for (j in 1:nrow(orders)) {\n        if (is.na(order_status[j]) && current_time >= orders$order_time[j]) {\n          order_status[j] <- \"in_progress\"  # Change order status to in_progress\n          vehicle_order[i] <- j\n          vehicle_state[i] <- \"received\"  # Vehicle starts receiving the order\n          \n          # Calculate ETA (time to reach pickup location)\n          distance_to_pickup <- calculate_distance(vehicles_df$xcor[i], vehicles_df$ycor[i], \n                                                   orders$pickup_x[j], orders$pickup_y[j])\n          transportation_time <- distance_to_pickup / vehicles_df$speed[i]  # Time to pickup location in hours\n          ETA[i] <- orders$order_time[j] + seconds(transportation_time) * 3600  # ETA in POSIXct object\n          \n          break\n        }\n      }\n    }\n    \n    # Get current order info for the assigned order\n    assigned_order <- vehicle_order[i]\n    \n    if (!is.na(assigned_order)) {\n      pickup_loc <- c(orders$pickup_x[assigned_order], orders$pickup_y[assigned_order])\n      dropoff_loc <- c(orders$dropoff_x[assigned_order], orders$dropoff_y[assigned_order])\n      \n      # Handle movement to pickup location\n      if (vehicle_state[i] == \"received\") {\n        if (!at_location(vehicles_df[i, ], pickup_loc)) {\n          vehicles_df[i, ] <- move_vehicle(vehicles_df[i, ], pickup_loc)\n        } else {\n          vehicle_state[i] <- \"loading\"  # Transition to loading state\n        }\n      }\n      \n      # Handle loading phase (vehicle at pickup location)\n      if (vehicle_state[i] == \"loading\") {\n        if (at_location(vehicles_df[i, ], pickup_loc)) {\n          vehicle_state[i] <- \"enroute\"  # Transition to enroute state\n          \n          # Calculate the transportation time to dropoff location\n          distance_to_dropoff <- calculate_distance(vehicles_df$xcor[i], vehicles_df$ycor[i], \n                                                   dropoff_loc[1], dropoff_loc[2])\n          transportation_time <- distance_to_dropoff / vehicles_df$speed[i]\n          ETD[i] <- ETA[i] + seconds(transportation_time*3600 + 30*60)   # Add transportation time to dropoff location\n        }\n      }\n      \n      # Handle enroute phase (vehicle moving to dropoff location)\n      if (vehicle_state[i] == \"enroute\") {\n        if (!at_location(vehicles_df[i, ], dropoff_loc)) {\n          vehicles_df[i, ] <- move_vehicle(vehicles_df[i, ], dropoff_loc)\n        } else {\n          vehicle_state[i] <- \"completed\"  # Transition to completed state\n          \n          # Set completed time (ETD + unloading time 40 minutes)\n          completed_time[i] <- ETD[i] + seconds(40*60)  # Unloading time 40 minutes\n        }\n      }\n      \n      # Handle unloading phase (vehicle at dropoff location)\n      if (vehicle_state[i] == \"completed\") {\n        order_status[assigned_order] <- \"completed\"\n      }\n    }\n  }\n  \n  # Store the current simulation results with time info\n  tick_result <- data.frame(\n    time = current_time,\n    vehicle_id = 1:n_vehicles,\n    xcor = vehicles_df$xcor,\n    ycor = vehicles_df$ycor,\n    speed = vehicles_df$speed,\n    order_status = order_status,\n    vehicle_order = vehicle_order,\n    vehicle_state = vehicle_state,  # Track vehicle state\n    ETA = ETA,  # Estimated Time of Arrival\n    ETD = ETD,  # Estimated Time of Departure\n    completed_time = completed_time  # Completed Time\n  ) \n  \n  # Append the current results to the final_results data frame\n  final_results <- bind_rows(final_results, tick_result)\n}\n\nfinal_results <- final_results|> \n  filter(!is.na(order_status)) |> \n    mutate(ETA = as.POSIXct(ETA, origin = \"1970-01-01\", tz = \"UTC\"),\n           ETD = as.POSIXct(ETD, origin = \"1970-01-01\", tz = \"UTC\"),\n           completed_time = as.POSIXct(completed_time, origin = \"1970-01-01\", tz = \"UTC\"))\n\nfinal<-final_results[!duplicated(final_results[, setdiff(names(final_results), \"time\")]), ]\n```\n\n![Biểu đồ 5: Agent Based Modeling](ABM.gif)\n\nKết quả cho thấy **xe 1** và **xe 2** có khả năng trễ chuyến nên cần lưu ý và hỗ trợ tài xế để đảm bảo xe đến đúng giờ hành chính. Như vậy chúng ta đã kết thúc bài học ở đây.\n\n## Kết luận:\n\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang **Rpubs** hoặc mã nguồn trên **Github**. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Me</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/simple-icons@v6.0.0/svgs/rstudio.svg\">\n    <style>\n        body { font-family: Arial, sans-serif; background-color: $secondary-color; }\n        .container { max-width: 400px; margin: auto; padding: 20px; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); }\n        label { display: block; margin: 10px 0 5px; }\n        input[type=\"email\"] { width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 4px; }\n        .github-button, .rpubs-button { margin-top: 20px; text-align: center; }\n        .github-button button, .rpubs-button button { background-color: #333; color: white; border: none; padding: 10px; cursor: pointer; border-radius: 4px; width: 100%; }\n        .github-button button:hover, .rpubs-button button:hover { background-color: #555; }\n        .rpubs-button button { background-color: #75AADB; }\n        .rpubs-button button:hover { background-color: #5A9BC2; }\n        .rpubs-icon { margin-right: 5px; width: 20px; vertical-align: middle; filter: brightness(0) invert(1); }\n        .error-message { color: red; font-size: 0.9em; margin-top: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Contact Me</h2>\n        <form id=\"emailForm\">\n            <label for=\"email\">Your Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required aria-label=\"Email Address\">\n            <div class=\"error-message\" id=\"error-message\" style=\"display: none;\">Please enter a valid email address.</div>\n            <button type=\"submit\">Send Email</button>\n        </form>\n        <div class=\"github-button\">\n            <button>\n                <a href=\"https://github.com/Loccx78vn/Simulation_in_R\" target=\"_blank\" style=\"color: white; text-decoration: none;\">\n                    <i class=\"fab fa-github\"></i> View Code on GitHub\n                </a>\n            </button>\n        </div>\n        <div class=\"rpubs-button\">\n            <button>\n                <a href=\"https://rpubs.com/loccx\" target=\"_blank\" style=\"color: white; text-decoration: none;\">\n                    <img src=\"https://cdn.jsdelivr.net/npm/simple-icons@v6.0.0/icons/rstudio.svg\" alt=\"RStudio icon\" class=\"rpubs-icon\"> Visit my RPubs\n                </a>\n            </button>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('emailForm').addEventListener('submit', function(event) {\n            event.preventDefault(); // Prevent default form submission\n            const emailInput = document.getElementById('email');\n            const email = emailInput.value;\n            const errorMessage = document.getElementById('error-message');\n\n            // Simple email validation regex\n            const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n            if (emailPattern.test(email)) {\n                errorMessage.style.display = 'none'; // Hide error message\n                const yourEmail = 'loccaoxuan103@gmail.com'; // Your email\n                const gmailLink = `https://mail.google.com/mail/?view=cm&fs=1&to=${yourEmail}&su=Help%20Request%20from%20${encodeURIComponent(email)}`;\n                window.open(gmailLink, '_blank'); // Open in new tab\n            } else {\n                errorMessage.style.display = 'block'; // Show error message\n            }\n        });\n    </script>\n</body>\n</html>\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n#| include: false\n#| message: false\n#| warning: false\npacman::p_load(\njanitor,\ntidyverse,\ndplyr,\ntidyr,\nmagrittr,\nshiny,\nleaflet,\nreactable,\nleaflet.extras,\nggplot2,\nquarto,\nreactablefmtr\n)\n```\n\n## Thực hành trong R:\n\n### Thư viện:\n\nTIếp theo là chúng ta sẽ lập thử *DES* trong **R** để giả lập quá trình duy chuyển của xe trong chuỗi cung ứng để ứng tính ETD và ETA.\n\nTrong **R** có package `simmer` thuần về xây dựng mô hình *DES*, đòi hỏi 3 nhân tố là: (i) Hành vi hoạt động của đối tượng, (ii) Hàm tính thời gian cho hoạt động và (iii) Môi trường để chạy mô phỏng. Bạn có thể đọc bài viết này để biết thêm [simmerR](https://www.supplychaindataanalytics.com/simmer-in-r-for-discrete-event-simulation/).\n\n### Mô hình DES:\n\nCác object cần có trong mô hình *DES* là:\n\n-   **Entitiy**: là đối tượng chính cần quan sát, ví dụ: khách hàng. Bạn sử dụng hàm `add_generator()` để thêm đối tượng vào mô hình.\n\n-   **Attribute**: là *property* của *entity* (có thể hiểu là đặc tính, trạng thái,...).\n\n-   **Resource**: là một nguồn lực mà *entity* được quyền dùng, ví dụ như nhân viên quán cafe cần hỗ trợ khách hàng khi có yêu cầu. Dùng hàm `add_resource()` để thêm và xác định số lượng resource bằng đối số: `capacity = n`.\n\n-   **Queue**: là một chuỗi để các *entity* tham gia vào, ví dụ như hàng xếp chờ lấy nước ở quán cafe.\n\n-   **Event**: các sự kiện thay đổi trong hệ thống.\n\nVí dụ như đoạn code dưới đây:\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: true\nlibrary(simmer)\nset.seed(1234)\n# Define the trajectory for the vehicle's process\nvehicle_traj <- trajectory(\"Vehicle Process\") %>%\n  # Step 1: Take Order\n  timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order\n  \n  # Step 2: Check if goods are available in the warehouse\n  seize(\"warehouse\", 1) %>%  \n  timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available\n  release(\"warehouse\", 1) %>%  # Release the warehouse resource after checking\n  \n  # Step 3: If goods are not available, wait for manufacturing (conditional)\n  branch(\n    option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance\n    continue = c(TRUE, TRUE),\n    trajectory() %>% \n      timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available\n    \n    trajectory(\"WaitForStock\")  # Second branch if goods are available\n  ) %>%\n  \n  # Step 4: Loading the goods\n  seize(\"truck\", 1) %>%  # Seize one truck for loading\n  timeout(function() rexp(1, 0.6)) %>%  # Loading time\n  release(\"truck\", 1) %>%  # Release truck after loading\n  \n  # Step 5: Transport to store\n  timeout(function() rexp(1, 1)) %>%  # Transport time\n  \n  # Step 6: Unload the goods at the store\n  seize(\"store\", 1) %>%  # Seize one store resource for unloading\n  timeout(function() rexp(1, 0.4)) %>%  # Unloading time\n  release(\"store\", 1)  # Release store resource\n\n# Create an environment\nenv <- simmer(\"Vehicle Simulation\") %>%\n  add_resource(\"warehouse\", capacity = 1) %>%  \n  add_resource(\"truck\", capacity = 1) %>%  \n  add_resource(\"store\", capacity = 1) %>%  \n  \n  # Add generator for vehicles arriving with an exponential inter-arrival time\n  add_generator(\"vehicle\", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units\n\n# Run the simulation for a longer duration\nenv %>% \n  run(until = 500)\n\nstart_time <- as.POSIXct(\"2024-11-09 08:30:00\", \n                         format=\"%Y-%m-%d %H:%M:%S\")\n\narrivals<-get_mon_arrivals(env, per_resource = T)\narrivals$datetime <- start_time + (arrivals$start_time * 60)  \narrivals$finish_datetime <- start_time + (arrivals$end_time * 60)  \n```\n\nThông tin từ **R** được xuất ra cho thấy thời gian chạy là 500 và có 45 xe đã di chuyển vào hệ thống. Kết quả giả lập được thể hiện như sau: các đốm thể hiện thời điểm xe đi vào, chờ giải quyết yêu cầu và đi ra khỏi hàng chờ.\n\n![Biểu đồ 1: Discrete Event Simulation](DES.gif)\n\nVà chúng ta sẽ có final output gồm:\n\n::: tabset\n#### Resources:\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Biểu đồ 2: Quy trình di chuyển giả lập của xe\"\n#| fig-cap-location: bottom\n\nlibrary(simmer.plot)\nresources <- get_mon_resources(env)\nplot(resources, \n     metric = \"usage\",\n     c(\"warehouse\", \"truck\",\"store\"),\n     items = \"server\")\n```\n\n#### Simulation:\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Biểu đồ 3: Thời gian giả lập của xe\"\n#| fig-cap-location: bottom\n\n\nlibrary(highcharter)\narrivals |> \n  dplyr::select(c(start_time,\n           end_time,\n           activity_time)) |> \n  pivot_longer(cols = everything(),\n               values_to = \"time\",\n               names_to = \"type\") |> \nhchart(\n  'line', \n  hcaes(y = time,\n        group = type)\n  ) \n```\n:::\n\n### Mô hình ABM:\n\nKhác với *DES*, *ABM* quan tâm nhiều hơn đến các đặc tính, thông tin của cá thể trong quần thể này. Do đó, chỉ với lượng thông tin về số xe, số nhà kho, số cửa hàng và quy trình hoạt động là chưa đủ để xây dựng mô hình *ABM*. Các dữ liệu khả thi có thể bao gồm: thông tin của đội xe: gồm bao nhiêu người hoặc gồm những ai; dữ liệu quá khứ về KPI, học vấn,...; thông tin về thời gian hoạt động của các cửa hàng; vị trí và thông tin về đường xá có cấm tải không;... *ABM* thường được ứng dụng vào việc xác định các *risks - rủi ro* trong quản lí chuỗi cung ứng\n\nTrong R có thư viện `NetLogoR` hỗ trợ chúng ta tốt về mảng mô hình *ABM*. Về nền tảng, *ABM* cần các yếu tố cơ bản sau:\n\n-   *Agents*: là cá thể hoạt động trong môi trường giả lập, có thể là con người, xe cộ, ...\n\n-   *World*: Môi trường mà các *agent* \"sống\" bên trong.\n\n-   *Set of rules*: Những luật lệ mà tất cả *agent* \"sống \"trong *world* phải tuân theo.\n\n-   *Loop*: Là sự lặp đi lặp lại của các hoạt động, sự tương tác. Trong lập trình thì nó giống như vòng lặp *for if* quen thuộc còn trong đời thực như cuộc sống hằng ngày của bạn sẽ được lặp đi lặp lại ví dụ: sáng thì đi học, tối thì đi ngủ và có thể có các đột biến như: sáng nay được nghỉ học, tối thứ 7 thì thức cả đêm (Đây lại là hoạt động quen thuộc của tôi!!!).\n\nNhư vậy, bạn có thể hình dung mơ hồ về quần thể giả lập bao gồm: các chiếc xe, các *nodes* trong *supply chain* như: nhà kho, cửa hàng,...\n\n![Biểu đồ 4: Simple of Agent Based Modeling](trajectory-animation.gif)\n\nNhư trên đây là ví dụ về cách *simulation* cho 1 đối tượng di chuyển trong mặt phẳng 10x10. Đối tượng sẽ di chuyển mỗi lần 1 ô với 4 hướng di chuyển: \"up\",\"down\",\"left\",\"right\" và được chọn hướng random. Kết quả sau 50 bước thì đối tượng đã di chuyển đến điểm *dropoff*.\n\nDưới đây là một ví dụ phức tạp hơn về giả lập thời gian di chuyển dự kiến của xe với các đặc điểm sau:\n\n-   **Nhận thông tin xe**: thời gian sẽ random từ 8h30 đến 9h.\n\n-   **Gọi xe**: Việc này sẽ hoàn thành trong 15 phút.\n\n-   **Xe di chuyển đến điểm pickup**: Tính thời gian di chuyển bằng `transportation time = distance/average speed` cộng với thời gian `loading time = 30'`.\n\n-   *Xe di chuyển đến điểm dropoff*: Tính thời gian di chuyển bằng `transportation time = distance/average speed` cộng với thời gian `unloading time = 40'`.\n\nKết quả giả lập cho 5 xe như sau:\n\n```{r}\n#| warning: false\n#| message: false\nlibrary(NetLogoR)\nlibrary(lubridate)\nlibrary(tidyverse)\n\n# Define new time parameters for the extended simulation\nn_vehicles <- 5              # Number of vehicles\ngrid_size <- 20              # Size of the grid\nspeed_limit <- 2             # Speed limit (cells per tick)\ntime_step <- 1               # Simulation time step (1 second per tick)\norder_creation_time <- c(hm(\"8:30\"), hm(\"9:00\"))   # Time when orders are released (8:30 AM)\nn_customer <- 5\n\nn_ticks <- 48  # Increase simulation time\n\n# Initialize the world, orders, and vehicle positions\nworld <- createWorld(minPxcor = -grid_size, \n                     maxPxcor = grid_size, \n                     minPycor = -grid_size, \n                     maxPycor = grid_size)\n\nrandom_coords <- randomXYcor(world, n = n_vehicles)\n\n# Define orders and vehicles\norders <- data.frame(\n  order_id = 1:n_customer,\n  pickup_x = sample(1:grid_size, n_customer, replace = TRUE),\n  pickup_y = sample(1:grid_size, n_customer, replace = TRUE),\n  dropoff_x = sample(1:grid_size, n_customer, replace = TRUE),\n  dropoff_y = sample(1:grid_size, n_customer, replace = TRUE),\n  order_time = as.POSIXct(\"08:30:00\", format = \"%H:%M:%S\") + runif(n_customer, 0, 1800)\n)\n\n# Initialize vehicles' position and speed\nvehicles_df <- data.frame(\n  vehicle_id = 1:n_vehicles,\n  xcor = random_coords[, 1],\n  ycor = random_coords[, 2],\n  speed = rep(1.5, n_vehicles)\n)\n\n# Initialize tracking variables\nvehicle_order <- rep(NA, n_vehicles)\norder_status <- rep(NA, n_customer)\nvehicle_state <- rep(\"waiting\", n_vehicles)  # New: track state of each vehicle\nETA <- rep(NA, n_vehicles)  # Initialize ETA for each vehicle\nETD <- rep(NA, n_vehicles)  # Initialize ETD for each vehicle\ncompleted_time <- rep(NA, n_vehicles)  # Initialize completed time for each vehicle\n\n# Function to simulate vehicle movement (with speed and direction)\nmove_vehicle <- function(vehicle, destination) {\n  angle_to_dest <- atan2(destination[2] - vehicle$ycor, destination[1] - vehicle$xcor)\n  distance_to_dest <- sqrt((vehicle$xcor - destination[1])^2 + (vehicle$ycor - destination[2])^2)\n  \n  # Move the vehicle\n  distance_to_move <- min(distance_to_dest, vehicle$speed)\n  vehicle$xcor <- vehicle$xcor + distance_to_move * cos(angle_to_dest)\n  vehicle$ycor <- vehicle$ycor + distance_to_move * sin(angle_to_dest)\n  \n  return(vehicle)\n}\n\n# Function to calculate the distance between two points\ncalculate_distance <- function(x1, y1, x2, y2) {\n  return(sqrt((x1 - x2)^2 + (y1 - y2)^2))\n}\n\n# Function to check if a vehicle is at a location (pickup/dropoff)\nat_location <- function(vehicle, location) {\n  return(abs(vehicle$xcor - location[1]) < 0.5 && abs(vehicle$ycor - location[2]) < 0.5)\n}\n\nsimulation_start_time <- as.POSIXct(\"08:00:00\", format = \"%H:%M:%S\")\n\n# Initialize an empty data frame to store the results\nfinal_results <- data.frame()\n\n# Simulation loop with updated conditions\nfor (tick in 1:n_ticks) {\n  current_time <- simulation_start_time + seconds(tick) * 3600 / 2\n  \n  # Process each vehicle\n  for (i in 1:n_vehicles) {\n    if (is.na(vehicle_order[i])) {  \n      # Assign a vehicle to an order if it's free and an order is available\n      for (j in 1:nrow(orders)) {\n        if (is.na(order_status[j]) && current_time >= orders$order_time[j]) {\n          order_status[j] <- \"in_progress\"  # Change order status to in_progress\n          vehicle_order[i] <- j\n          vehicle_state[i] <- \"received\"  # Vehicle starts receiving the order\n          \n          # Calculate ETA (time to reach pickup location)\n          distance_to_pickup <- calculate_distance(vehicles_df$xcor[i], vehicles_df$ycor[i], \n                                                   orders$pickup_x[j], orders$pickup_y[j])\n          transportation_time <- distance_to_pickup / vehicles_df$speed[i]  # Time to pickup location in hours\n          ETA[i] <- orders$order_time[j] + seconds(transportation_time) * 3600  # ETA in POSIXct object\n          \n          break\n        }\n      }\n    }\n    \n    # Get current order info for the assigned order\n    assigned_order <- vehicle_order[i]\n    \n    if (!is.na(assigned_order)) {\n      pickup_loc <- c(orders$pickup_x[assigned_order], orders$pickup_y[assigned_order])\n      dropoff_loc <- c(orders$dropoff_x[assigned_order], orders$dropoff_y[assigned_order])\n      \n      # Handle movement to pickup location\n      if (vehicle_state[i] == \"received\") {\n        if (!at_location(vehicles_df[i, ], pickup_loc)) {\n          vehicles_df[i, ] <- move_vehicle(vehicles_df[i, ], pickup_loc)\n        } else {\n          vehicle_state[i] <- \"loading\"  # Transition to loading state\n        }\n      }\n      \n      # Handle loading phase (vehicle at pickup location)\n      if (vehicle_state[i] == \"loading\") {\n        if (at_location(vehicles_df[i, ], pickup_loc)) {\n          vehicle_state[i] <- \"enroute\"  # Transition to enroute state\n          \n          # Calculate the transportation time to dropoff location\n          distance_to_dropoff <- calculate_distance(vehicles_df$xcor[i], vehicles_df$ycor[i], \n                                                   dropoff_loc[1], dropoff_loc[2])\n          transportation_time <- distance_to_dropoff / vehicles_df$speed[i]\n          ETD[i] <- ETA[i] + seconds(transportation_time*3600 + 30*60)   # Add transportation time to dropoff location\n        }\n      }\n      \n      # Handle enroute phase (vehicle moving to dropoff location)\n      if (vehicle_state[i] == \"enroute\") {\n        if (!at_location(vehicles_df[i, ], dropoff_loc)) {\n          vehicles_df[i, ] <- move_vehicle(vehicles_df[i, ], dropoff_loc)\n        } else {\n          vehicle_state[i] <- \"completed\"  # Transition to completed state\n          \n          # Set completed time (ETD + unloading time 40 minutes)\n          completed_time[i] <- ETD[i] + seconds(40*60)  # Unloading time 40 minutes\n        }\n      }\n      \n      # Handle unloading phase (vehicle at dropoff location)\n      if (vehicle_state[i] == \"completed\") {\n        order_status[assigned_order] <- \"completed\"\n      }\n    }\n  }\n  \n  # Store the current simulation results with time info\n  tick_result <- data.frame(\n    time = current_time,\n    vehicle_id = 1:n_vehicles,\n    xcor = vehicles_df$xcor,\n    ycor = vehicles_df$ycor,\n    speed = vehicles_df$speed,\n    order_status = order_status,\n    vehicle_order = vehicle_order,\n    vehicle_state = vehicle_state,  # Track vehicle state\n    ETA = ETA,  # Estimated Time of Arrival\n    ETD = ETD,  # Estimated Time of Departure\n    completed_time = completed_time  # Completed Time\n  ) \n  \n  # Append the current results to the final_results data frame\n  final_results <- bind_rows(final_results, tick_result)\n}\n\nfinal_results <- final_results|> \n  filter(!is.na(order_status)) |> \n    mutate(ETA = as.POSIXct(ETA, origin = \"1970-01-01\", tz = \"UTC\"),\n           ETD = as.POSIXct(ETD, origin = \"1970-01-01\", tz = \"UTC\"),\n           completed_time = as.POSIXct(completed_time, origin = \"1970-01-01\", tz = \"UTC\"))\n\nfinal<-final_results[!duplicated(final_results[, setdiff(names(final_results), \"time\")]), ]\n```\n\n![Biểu đồ 5: Agent Based Modeling](ABM.gif)\n\nKết quả cho thấy **xe 1** và **xe 2** có khả năng trễ chuyến nên cần lưu ý và hỗ trợ tài xế để đảm bảo xe đến đúng giờ hành chính. Như vậy chúng ta đã kết thúc bài học ở đây.\n\n## Kết luận:\n\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang **Rpubs** hoặc mã nguồn trên **Github**. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Me</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/simple-icons@v6.0.0/svgs/rstudio.svg\">\n    <style>\n        body { font-family: Arial, sans-serif; background-color: $secondary-color; }\n        .container { max-width: 400px; margin: auto; padding: 20px; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); }\n        label { display: block; margin: 10px 0 5px; }\n        input[type=\"email\"] { width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 4px; }\n        .github-button, .rpubs-button { margin-top: 20px; text-align: center; }\n        .github-button button, .rpubs-button button { background-color: #333; color: white; border: none; padding: 10px; cursor: pointer; border-radius: 4px; width: 100%; }\n        .github-button button:hover, .rpubs-button button:hover { background-color: #555; }\n        .rpubs-button button { background-color: #75AADB; }\n        .rpubs-button button:hover { background-color: #5A9BC2; }\n        .rpubs-icon { margin-right: 5px; width: 20px; vertical-align: middle; filter: brightness(0) invert(1); }\n        .error-message { color: red; font-size: 0.9em; margin-top: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Contact Me</h2>\n        <form id=\"emailForm\">\n            <label for=\"email\">Your Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required aria-label=\"Email Address\">\n            <div class=\"error-message\" id=\"error-message\" style=\"display: none;\">Please enter a valid email address.</div>\n            <button type=\"submit\">Send Email</button>\n        </form>\n        <div class=\"github-button\">\n            <button>\n                <a href=\"https://github.com/Loccx78vn/Simulation_in_R\" target=\"_blank\" style=\"color: white; text-decoration: none;\">\n                    <i class=\"fab fa-github\"></i> View Code on GitHub\n                </a>\n            </button>\n        </div>\n        <div class=\"rpubs-button\">\n            <button>\n                <a href=\"https://rpubs.com/loccx\" target=\"_blank\" style=\"color: white; text-decoration: none;\">\n                    <img src=\"https://cdn.jsdelivr.net/npm/simple-icons@v6.0.0/icons/rstudio.svg\" alt=\"RStudio icon\" class=\"rpubs-icon\"> Visit my RPubs\n                </a>\n            </button>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('emailForm').addEventListener('submit', function(event) {\n            event.preventDefault(); // Prevent default form submission\n            const emailInput = document.getElementById('email');\n            const email = emailInput.value;\n            const errorMessage = document.getElementById('error-message');\n\n            // Simple email validation regex\n            const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n            if (emailPattern.test(email)) {\n                errorMessage.style.display = 'none'; // Hide error message\n                const yourEmail = 'loccaoxuan103@gmail.com'; // Your email\n                const gmailLink = `https://mail.google.com/mail/?view=cm&fs=1&to=${yourEmail}&su=Help%20Request%20from%20${encodeURIComponent(email)}`;\n                window.open(gmailLink, '_blank'); // Open in new tab\n            } else {\n                errorMessage.style.display = 'block'; // Show error message\n            }\n        });\n    </script>\n</body>\n</html>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"output-file":"practice.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.30","editor":"visual","theme":{"light":"theme-light.scss","dark":"theme-dark.scss"},"title":"Practice in R","subtitle":"Việt Nam, 2024","categories":["SupplyChainManagement","Simulation","Agent Based Modeling"],"description":"Cách thực hành trong R","author":"Cao Xuân Lộc","date":"2024-11-13","title-block-banner":"img/mountain.jpg","title-block-banner-color":"white","bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}