formatter = JS(
"function() {
var baseTime = Date.parse('2024-11-11 08:30:00 UTC'); // Base time
var timeOffset = this.y * 60000; // Convert minutes to milliseconds
var calculatedTime = new Date(baseTime + timeOffset);
return '<b>' + this.series.name + '</b><br>' +
'Time: ' + Highcharts.dateFormat('%Y-%m-%d %H:%M:%S UTC', calculatedTime);
}"
)
)
arrival_data |>
dplyr::select(c(start_time,
end_time,
activity_time)) |>
pivot_longer(cols = everything(),
values_to = "time",
names_to = "type") |>
hchart(
'line',
hcaes(y = time,
group = type)
) |>
hc_tooltip(
pointFormat = '{point.x: %Y-%m-%d} ',
headerFormat = '',
useHTML = TRUE,
formatter = JS(
"function() {
var baseTime = Date.parse('2024-11-11 08:30:00 UTC'); // Base time
var timeOffset = this.y * 60000; // Convert minutes to milliseconds
var calculatedTime = new Date(baseTime + timeOffset);
return '<b>' + this.series.name + '</b><br>' +
'Time: ' + Highcharts.dateFormat('%Y-%m-%d %H:%M:%S UTC', calculatedTime);
}"
)
)
#| include: false
#| message: false
#| warning: false
pacman::p_load(
janitor,
tidyverse,
dplyr,
tidyr,
magrittr,
shiny,
leaflet,
reactable,
leaflet.extras,
ggplot2,
quarto,
reactablefmtr
)
#| warning: false
#| message: false
#| echo: true
library(simmer)
set.seed(1234)
# Define the trajectory for the vehicle's process
vehicle_traj <- trajectory("Vehicle Process") %>%
# Step 1: Take Order
log_("Move to pickup location") |>
timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order
# Step 2: Check if goods are available in the warehouse
seize("warehouse", 1) %>%
timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available
release("warehouse", 1) %>%  # Release the warehouse resource after checking
# Step 3: If goods are not available, wait for manufacturing (conditional)
branch(
option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance
continue = c(TRUE, TRUE),
trajectory() %>%
timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available
trajectory("WaitForStock")  # Second branch if goods are available
) %>%
# Step 4: Loading the goods
seize("truck", 1) %>%  # Seize one truck for loading
timeout(function() rexp(1, 0.6)) %>%  # Loading time
release("truck", 1) %>%  # Release truck after loading
# Step 5: Transport to store
timeout(function() rexp(1, 1)) %>%  # Transport time
# Step 6: Unload the goods at the store
seize("store", 1) %>%  # Seize one store resource for unloading
timeout(function() rexp(1, 0.4)) %>%  # Unloading time
release("store", 1)  # Release store resource
# Create an environment
env <- simmer("Vehicle Simulation") %>%
add_resource("warehouse", capacity = 1) %>%
add_resource("truck", capacity = 1) %>%
add_resource("store", capacity = 1) %>%
# Add generator for vehicles arriving with an exponential inter-arrival time
add_generator("vehicle", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units
# Run the simulation for a longer duration
env %>%
run(until = 500)
start_time <- as.POSIXct("2024-11-09 08:30:00",
format="%Y-%m-%d %H:%M:%S")
arrivals<-get_mon_arrivals(env, per_resource = T)
arrivals$datetime <- start_time + (arrivals$start_time * 60)
arrivals$finish_datetime <- start_time + (arrivals$end_time * 60)
#| warning: false
#| message: false
# Extract arrival data (time the vehicle spends in the system, i.e., its total time)
arrivals <- get_mon_arrivals(env)
# Extract resource utilization data (how long each resource was occupied)
resources <- get_mon_resources(env)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
get_palette <- scales::brewer_pal(type = "qual",
palette = 1)
plot(vehicle_traj, fill = get_palette)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 3: Thời gian giả lập của xe"
#| fig-cap-location: bottom
library(highcharter)
arrivals |>
dplyr::select(c(start_time,
end_time,
activity_time)) |>
pivot_longer(cols = everything(),
values_to = "time",
names_to = "type") |>
hchart(
'line',
hcaes(y = time,
group = type)
)
#| warning: false
#| message: false
# Extract arrival data (time the vehicle spends in the system, i.e., its total time)
arrivals <- get_mon_arrivals(env)
# Extract resource utilization data (how long each resource was occupied)
resources <- get_mon_resources(env)
#| warning: false
#| message: false
#| echo: true
library(simmer)
set.seed(1234)
# Define the trajectory for the vehicle's process
vehicle_traj <- trajectory("Vehicle Process") %>%
# Step 1: Take Order
timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order
# Step 2: Check if goods are available in the warehouse
seize("warehouse", 1) %>%
timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available
release("warehouse", 1) %>%  # Release the warehouse resource after checking
# Step 3: If goods are not available, wait for manufacturing (conditional)
branch(
option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance
continue = c(TRUE, TRUE),
trajectory() %>%
timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available
trajectory("WaitForStock")  # Second branch if goods are available
) %>%
# Step 4: Loading the goods
seize("truck", 1) %>%  # Seize one truck for loading
timeout(function() rexp(1, 0.6)) %>%  # Loading time
release("truck", 1) %>%  # Release truck after loading
# Step 5: Transport to store
timeout(function() rexp(1, 1)) %>%  # Transport time
# Step 6: Unload the goods at the store
seize("store", 1) %>%  # Seize one store resource for unloading
timeout(function() rexp(1, 0.4)) %>%  # Unloading time
release("store", 1)  # Release store resource
# Create an environment
env <- simmer("Vehicle Simulation") %>%
add_resource("warehouse", capacity = 1) %>%
add_resource("truck", capacity = 1) %>%
add_resource("store", capacity = 1) %>%
# Add generator for vehicles arriving with an exponential inter-arrival time
add_generator("vehicle", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units
# Run the simulation for a longer duration
env %>%
run(until = 500)
start_time <- as.POSIXct("2024-11-09 08:30:00",
format="%Y-%m-%d %H:%M:%S")
arrivals<-get_mon_arrivals(env, per_resource = T)
arrivals$datetime <- start_time + (arrivals$start_time * 60)
arrivals$finish_datetime <- start_time + (arrivals$end_time * 60)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
#| include: false
#| message: false
#| warning: false
pacman::p_load(
janitor,
tidyverse,
dplyr,
tidyr,
magrittr,
shiny,
leaflet,
reactable,
leaflet.extras,
ggplot2,
quarto,
reactablefmtr
)
#| warning: false
#| message: false
#| echo: true
library(simmer)
set.seed(1234)
# Define the trajectory for the vehicle's process
vehicle_traj <- trajectory("Vehicle Process") %>%
# Step 1: Take Order
timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order
# Step 2: Check if goods are available in the warehouse
seize("warehouse", 1) %>%
timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available
release("warehouse", 1) %>%  # Release the warehouse resource after checking
# Step 3: If goods are not available, wait for manufacturing (conditional)
branch(
option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance
continue = c(TRUE, TRUE),
trajectory() %>%
timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available
trajectory("WaitForStock")  # Second branch if goods are available
) %>%
# Step 4: Loading the goods
seize("truck", 1) %>%  # Seize one truck for loading
timeout(function() rexp(1, 0.6)) %>%  # Loading time
release("truck", 1) %>%  # Release truck after loading
# Step 5: Transport to store
timeout(function() rexp(1, 1)) %>%  # Transport time
# Step 6: Unload the goods at the store
seize("store", 1) %>%  # Seize one store resource for unloading
timeout(function() rexp(1, 0.4)) %>%  # Unloading time
release("store", 1)  # Release store resource
# Create an environment
env <- simmer("Vehicle Simulation") %>%
add_resource("warehouse", capacity = 1) %>%
add_resource("truck", capacity = 1) %>%
add_resource("store", capacity = 1) %>%
# Add generator for vehicles arriving with an exponential inter-arrival time
add_generator("vehicle", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units
# Run the simulation for a longer duration
env %>%
run(until = 500)
start_time <- as.POSIXct("2024-11-09 08:30:00",
format="%Y-%m-%d %H:%M:%S")
arrivals<-get_mon_arrivals(env, per_resource = T)
arrivals$datetime <- start_time + (arrivals$start_time * 60)
arrivals$finish_datetime <- start_time + (arrivals$end_time * 60)
#| warning: false
#| message: false
# Extract arrival data (time the vehicle spends in the system, i.e., its total time)
arrivals <- get_mon_arrivals(env)
# Extract resource utilization data (how long each resource was occupied)
resources <- get_mon_resources(env)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 3: Thời gian giả lập của xe"
#| fig-cap-location: bottom
library(highcharter)
arrivals |>
dplyr::select(c(start_time,
end_time,
activity_time)) |>
pivot_longer(cols = everything(),
values_to = "time",
names_to = "type") |>
hchart(
'line',
hcaes(y = time,
group = type)
)
view(arrivals)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 3: Thời gian giả lập của xe"
#| fig-cap-location: bottom
library(highcharter)
arrivals |>
dplyr::select(c(start_time,
end_time,
activity_time)) |>
pivot_longer(cols = everything(),
values_to = "time",
names_to = "type") |>
hchart(
'line',
hcaes(y = time,
group = type)
)
range(arrivals$time)
#| include: false
#| message: false
#| warning: false
pacman::p_load(
janitor,
tidyverse,
dplyr,
tidyr,
magrittr,
shiny,
leaflet,
reactable,
leaflet.extras,
ggplot2,
quarto,
reactablefmtr
)
#| warning: false
#| message: false
#| echo: true
library(simmer)
set.seed(1234)
# Define the trajectory for the vehicle's process
vehicle_traj <- trajectory("Vehicle Process") %>%
# Step 1: Take Order
timeout(function() rnorm(n=1, mean = 30, sd = 3)) %>% # Time to take an order
# Step 2: Check if goods are available in the warehouse
seize("warehouse", 1) %>%
timeout(function() rexp(1, 0.3)) %>%  # Time to check if goods are available
release("warehouse", 1) %>%  # Release the warehouse resource after checking
# Step 3: If goods are not available, wait for manufacturing (conditional)
branch(
option = function() ifelse(runif(1) < 0.5, 1, 2),  # 50% chance
continue = c(TRUE, TRUE),
trajectory() %>%
timeout(function() rexp(1, 0.8)),  # Manufacturing time if goods aren't available
trajectory("WaitForStock")  # Second branch if goods are available
) %>%
# Step 4: Loading the goods
seize("truck", 1) %>%  # Seize one truck for loading
timeout(function() rexp(1, 0.6)) %>%  # Loading time
release("truck", 1) %>%  # Release truck after loading
# Step 5: Transport to store
timeout(function() rexp(1, 1)) %>%  # Transport time
# Step 6: Unload the goods at the store
seize("store", 1) %>%  # Seize one store resource for unloading
timeout(function() rexp(1, 0.4)) %>%  # Unloading time
release("store", 1)  # Release store resource
# Create an environment
env <- simmer("Vehicle Simulation") %>%
add_resource("warehouse", capacity = 1) %>%
add_resource("truck", capacity = 1) %>%
add_resource("store", capacity = 1) %>%
# Add generator for vehicles arriving with an exponential inter-arrival time
add_generator("vehicle", vehicle_traj, function() rexp(1, 0.1))  # Average of 10 vehicles per 100 time units
# Run the simulation for a longer duration
env %>%
run(until = 500)
start_time <- as.POSIXct("2024-11-09 08:30:00",
format="%Y-%m-%d %H:%M:%S")
arrivals<-get_mon_arrivals(env, per_resource = T)
arrivals$datetime <- start_time + (arrivals$start_time * 60)
arrivals$finish_datetime <- start_time + (arrivals$end_time * 60)
#| warning: false
#| message: false
# Extract arrival data (time the vehicle spends in the system, i.e., its total time)
arrivals <- get_mon_arrivals(env)
# Extract resource utilization data (how long each resource was occupied)
resources <- get_mon_resources(env)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
simmer.plot::plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
plot(resources,
metric = "usage", c("warehouse",
"truck",
"store"),
items = "server")
resources
head(resources)
view(resources)
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage",
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
library(simmer)
# Create a simulation environment
env <- simmer()
# Define resources
env <- env %>%
add_resource("warehouse", capacity = 5) %>%
add_resource("truck", capacity = 3) %>%
add_resource("store", capacity = 2)
# Define a trajectory for the simulation
traj <- trajectory() %>%
seize("warehouse", 1) %>%
seize("truck", 1) %>%
seize("store", 1) %>%
release("warehouse", 1) %>%
release("truck", 1) %>%
release("store", 1)
# Add the trajectory to the environment
env <- env %>%
add_generator("server", traj, at(0, 5, 10, 15))  # Generate arrivals at times 0, 5, 10, 15
# Run the simulation
env %>% run(until = 20)
# Now you should have the `resources` object to plot
resources <- env %>% get_mon_resources()
# Now plot using simmer.plot
library(simmer.plot)
plot(resources,
metric = "usage",
c("warehouse", "truck", "store"),
items = "server")
plot(resources,
metric = "usage",
c("warehouse", "truck", "store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
resources <- get_mon_resources(env)
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
resources <- get_mon_resources(env)
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
resources <- get_mon_resources(env)
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
#| warning: false
#| message: false
#| fig-cap: "Biểu đồ 2: Quy trình di chuyển giả lập của xe"
#| fig-cap-location: bottom
library(simmer.plot)
resources <- get_mon_resources(env)
plot(resources,
metric = "usage",
c("warehouse", "truck","store"),
items = "server")
